Microsoft (R) Macro Assembler Version 14.16.27023.1	    11/25/18 12:43:37
plik_err.asm						     Page 1 - 1


				comment | W 48-bajtowej tablicy  bufor  znajduje siê pewien tekst zakodowany w formacie UTF-8.
				Napisaæ program w asemblerze, który wyœwietli ten tekst na ekranie 
				w postaci komunikatu typu MessageBoxW. W poni¿szej tablicy wystêpuj¹ ci¹gi UTF-8 1-, 2-, 3- i 4-bajtowe.
				Uwaga: prawid³owe znaki poci¹gu oraz autobusu wyswietlane s¹ systemach Windows 8 i Windows 10.
				W kodzie jest 5 b³êdów
				|

				.686
				.model flat

				extern _MessageBoxW@16 : proc
				extern _ExitProcess@4 : proc


				public _main

 00000000			.data
				; bufor wejsciowy ze znakami w utf-8
 00000000 50 6F C5 82 C4	bufor	db	50H, 6FH, 0C5H, 82H, 0C4H, 85H, 63H, 7AH, 65H, 6EH, 69H, 61H, 20H	
	   85 63 7A 65 6E
	   69 61 20
 0000000D  F0 9F 9A 82				db  0F0h, 9Fh, 9Ah, 82H
 00000011  20 20 6B 6F 6C			db	20h, 20H,  6BH, 6FH, 6CH, 65H, 6AH, 6FH, 77H, 6FH, 20H
	   65 6A 6F 77 6F
	   20
 0000001C  E2 80 93				db 	0E2H, 80H, 93h
 0000001F  20 61 75 74 6F			db	20H, 61H, 75H, 74H, 6FH, 62H, 75H, 73H, 6FH, 77H, 65H, 20H, 20H
	   62 75 73 6F 77
	   65 20 20
 0000002C  F0 9F 9A 8C E2			db	0F0h, 9FH, 9AH, 8CH, 0E2H, 91H, 0A4H	
	   91 A4
 00000033

 = 00000033			rozmiar = $ - bufor

				;bufor wynikowy ze znakami w utf-16
 00000033  00000068 [		wynik  db 2*(rozmiar+1) dup (0)
	    00
	   ]

				;tytul okna do wyswietlenia
 0000009B 0054 0079 0074	tytul  dw 'T','y','t','u',0142h,0
	   0075 0142 0000
 00000000			.code
 00000000			_main PROC

					;mov esi,0		; indeks bajtu w tablicy bufor
					;mov edi,0		; indeks bajtu w tablicy wynik
 00000000  BE 00000000 R		mov esi,OFFSET bufor   ; ustawienia esi na adres efektywny lancucha zrodlowego w utf-8
 00000005  BF 00000033 R		mov edi,OFFSET wynik   ; ustawienie edi na adres efektywny lanucha docelowego w utf-16


 0000000A  B9 00000033			mov ecx,rozmiar		; liczba wykonan petli

 0000000F			konwersja:
					;stc		; ustawenie znacznika CF
							;pobierz bajt z bufora wejsciowego
 0000000F  8A 06			mov al,[esi]
					;dokonaj oceny poczatkowego prefiksu w pierwszym znaku w utf-8
 00000011  D0 D0			rcl al,1
 00000013  73 0B			jnc jeden_bajt   ; jednobajtowy znak
 00000015  C0 D0 02			rcl al,2
 00000018  73 1E			jnc dwa_bajty    ; dwubajtowy znak
 0000001A  D0 C0			rol al,1
 0000001C  73 41			jnc trzy_bajty   ; trzybajtowy znak
 0000001E  EB 6D			jmp cztery_bajty

 00000020			jeden_bajt:
 00000020  D0 C8			ror al,1		; przywrócenie wlasciwej kolejnosci
 00000022  F8				clc
 00000023  66| 0F B6 D8			movzx bx,al		; rozszerzenie na znak utf-16
 00000027  66| 89 1F			mov [edi],bx	; zapis do lanucha wynikowego
 0000002A  8D 7F 02			lea  edi,[edi+2]	; ustawienie wskaznika zapisu na nastêpny znak
 0000002D  46				inc esi		; zwiekszenie wskaznika odczytu o 2 bajty
 0000002E  83 E9 01			sub ecx,1		; zmniejszenie licznika znaków do analizy o 2 przeczytane
 00000031  75 DC			jnz konwersja
 00000033  E9 000000B8			jmp wyswietlanie


 00000038			dwa_bajty:
 00000038  66| BB 0000				mov bx,0		; miejsce na znak utf-16
 0000003C  8A 5E 01				mov bl,[esi+1]	; najstarszy bajt znaku utf-8  110xxxxx   ;najpierw najmlodszy
 0000003F  80 E3 1F				and bl, 00011111b	; maska  -> 000xxxxx
 00000042  66| C1 E3 07				shl bx,7
 00000046  8A 06				mov al,[esi]	;  kolejna czeœæ znaku utf-8 do al -> 10xxxxxx
 00000048  24 3F				and al, 111111b  ; maska  -> 00xxxxxx 
 0000004A  32 D8			    xor bl,al		; sklejenie bitów 
 0000004C  66| 89 1F				mov [edi],bx	; zapis do lanucha wynikowego
						
 0000004F  83 C7 02				add edi,2	; ustawienie wskaznika zapisu na nastêpny znak
 00000052  83 C6 02				add esi,2	; zwiekszenie wskaznika odczytu o 2 bajty
 00000055  83 E9 02				sub ecx,2	; zmniejszenie licznika znaków do analizy o 2 przeczytane
 00000058  75 B5				jnz konwersja
 0000005A  E9 00000091				jmp wyswietlanie	

 0000005F			trzy_bajty:
 0000005F  66| BB 0000				mov bx,0		; miejsce na znak utf-16
 00000063  8A 1E				mov bl,[esi]	; najstarszy bajt znaku ut-8  1110xxxx
 00000065  80 E3 0F				and bl,1111b	; maska  -> 0000xxxx
 00000068  66| C1 E3 08				shl bx,8		; 
 0000006C  8A 5E 01				mov bl,[esi+1]	;  bl -> 10xxxxxx
 0000006F  C0 E3 02				shl bl,2		;  bl -> xxxxxx00
 00000072  66| C1 E3 04				shl bx,4		;  bx -> xxxxxxxx xx000000

 00000076  8A 46 02				mov al,[esi+2]  ; ostatni bajt utf-8
 00000079  24 3F				and al,111111b	; zerowanie 2 najstarszych bitów al -> 00xxxxxx
 0000007B  0A D8				or bl,al		; w bx koncowy wynik

 0000007D  66| 89 1F				mov [edi],bx	; zapisanie znaku w buforze wynikowym
						
 00000080  83 C7 02				add edi,2		; ustawienie wskaznika zapisu na nastêpny znak
 00000083  83 C6 03				add esi,3		; zwiekszenie wskaznika odczytu o 3 bajty	
 00000086  83 E9 03				sub ecx,3	    ; zmniejszenie licznika	
 00000089  75 84				jnz konwersja
 0000008B  EB 63				jmp wyswietlanie	
					
 0000008D			cztery_bajty:
 0000008D  BB 00000000				mov ebx,0		; miejsce na znak utf-16
 00000092  8A 1E				mov bl,[esi]	; najstarszy bajt znaku ut-8  11110xxx
 00000094  80 E3 07				and bl,111b		; maska  -> 00000xxx
 00000097  66| C1 E3 08				shl bx,8		;	bx -> 00000xxx 00000000 
 0000009B  8A 5E 01				mov bl,[esi+1]	;  bl -> 10xxxxxx
 0000009E  C0 E3 02				shl bl,2		;  bl -> xxxxxx00
 000000A1  66| C1 E3 05				shl bx,5		;  bx -> xxxxxxxx x0000000

 000000A5  8A 46 02				mov al,[esi+2]  ; ostatni bajt utf-8
 000000A8  24 3F				and al,111111b	; zerowanie 2 najstarszych bitów al -> 00xxxxxx
 000000AA  D0 E0				shl al,1		; al-> 0xxxxxx0
 000000AC  0A D8				or bl,al		; w bx -> xxxxxxxx xxxxxxx0

 000000AE  8A 46 03				mov al,[esi+3]	; ostatni, czwarty bajt z utf-8
 000000B1  24 3F				and al,111111b  ; wyzerowanie dwóch najstarszych bitów
 000000B3  C1 E3 05				shl ebx,5		; ebx -> 0000 0000 000x xxxx  xxxx xxxx  xx00 0000
 000000B6  0A D8				or bl,al	    ; ebx -> 0000 0000 000x xxxx  xxxx xxxx  xxxx xxxx
						; w ebx mamy 21 bitów kodu Unicode

						; w³aœciwe kodowanie na utf-16
 000000B8  81 EB 00010000			sub ebx,10000h
 000000BE  8B C3				mov eax,ebx			; utworzenie kopii rejestru
 000000C0  C1 E8 0A				shr eax,10			;  0000 0000 0000 0000 0000 00xx xxxx xxxx
 000000C3  0D 0000D800				or  eax, 1101100000000000b  ; w ax - starszy znak utf-16

 000000C8  C1 E3 15				shl ebx,21
 000000CB  C1 EB 15				shr ebx,21

 000000CE  BA 00000037				mov edx,110111b		; prefiks drugiego znaku
 000000D3  C1 E2 0A				shl edx,10			
 000000D6  0B DA				or ebx,edx		 ; bx - drugi, m³odszy znak utf-16

 000000D8  66| 89 07				mov [edi],ax    ; zapis starszego znaku utf-16
 000000DB  66| 89 5F 02				mov [edi+2],bx  ; zapis m³odszego znaku
 000000DF  83 C7 04				add edi,4		; ustawienie wskaznika zapisu na nastêpny znak
 000000E2  83 C6 04				add esi,4		; zwiekszenie wskaznika odczytu o 3 bajty	
 000000E5  83 E9 04				sub ecx,4	    ; zmniejszenie licznika	
 000000E8  0F 85 FFFFFF21			jnz konwersja
 000000EE  EB 00				jmp wyswietlanie	





 000000F0			wyswietlanie:	
 000000F0  6A 00			push 0			; identyfikator przycisków
 000000F2  68 0000009B R		push OFFSET tytul  ; adres ³añcucha z tytu³em
 000000F7  68 00000033 R		push OFFSET wynik   ; adres w³aœciwego napisu
 000000FC  6A 00			push 0			; uchwyt
 000000FE  E8 00000000 E		call _MessageBoxW@16

 00000103  6A 00			push 0
 00000105  E8 00000000 E		call _ExitProcess@4
 0000010A			_main ENDP
				END
Microsoft (R) Macro Assembler Version 14.16.27023.1	    11/25/18 12:43:37
plik_err.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000A7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000010A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_main  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000010A Public
  konwersja  . . . . . . . . . .	L Near	 0000000F _TEXT	
  jeden_bajt . . . . . . . . . .	L Near	 00000020 _TEXT	
  dwa_bajty  . . . . . . . . . .	L Near	 00000038 _TEXT	
  trzy_bajty . . . . . . . . . .	L Near	 0000005F _TEXT	
  cztery_bajty . . . . . . . . .	L Near	 0000008D _TEXT	
  wyswietlanie . . . . . . . . .	L Near	 000000F0 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_ExitProcess@4 . . . . . . . . .	L Near	 00000000 FLAT	External
_MessageBoxW@16  . . . . . . . .	L Near	 00000000 FLAT	External
bufor  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
rozmiar  . . . . . . . . . . . .	Number	 00000033h   
tytul  . . . . . . . . . . . . .	Word	 0000009B _DATA	
wynik  . . . . . . . . . . . . .	Byte	 00000033 _DATA	

	   0 Warnings
	   0 Errors
